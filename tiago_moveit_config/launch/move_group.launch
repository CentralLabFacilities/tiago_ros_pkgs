<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Selector for tiago type -->
  <arg name="arm"  default="True"/>
  <arg name="end_effector"  default="schunk-wsg-cupro"/>
  <arg name="ft_sensor"  default="schunk-ft"/>
  <arg name="laser_model"  default="sick-571"/>
  <arg name="camera_model"  default="asus-xtion"/>
  <arg name="planner" default="kdl"/>

  <!-- Use moveit camera manager -->
  <arg name="camera"  default="true"/>

  <arg name="load_robot_description" default="false"/>

  
  <include file="$(find tiago_moveit_config)/launch/planning_context.launch">
    <arg name="arm" value="$(arg arm)"/>
    <arg name="planner" value="$(arg planner)" />
    <arg name="end_effector" value="$(arg end_effector)"/>
    <arg name="ft_sensor" value="$(arg ft_sensor)"/>
    <arg name="laser_model" value="$(arg laser_model)"/>
    <arg name="camera_model" value="$(arg camera_model)"/>
    <arg name="load_robot_description" default="$(arg load_robot_description)"/>
  </include>

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Planning Functionality -->
  <include ns="move_group" file="$(find tiago_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <arg name="file_suffix" value="$(eval ('no-arm' if not arm else end_effector+ ('' if not ft_sensor else '_'+ft_sensor)))"/>
  <include ns="move_group" file="$(find tiago_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="tiago" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="robot_sufix" value="$(arg file_suffix)" />
  </include>

  <!-- Sensors Functionality -->
  <group if="$(arg camera)">
    <include ns="move_group" file="$(find tiago_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
      <arg name="moveit_sensor_manager" value="tiago" />
    </include>

    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

    <node pkg="nodelet" type="nodelet" name="points" 
      args="load depth_image_proc/point_cloud_xyz pcl_manager">
      <remap from="camera_info" to="/camera/depth/camera_info"/>
      <remap from="image_rect" to="/camera/depth/image_raw"/>
      <remap from="image" to="/camera/depth/image_raw"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
      <remap from="~input" to="/points" />
      <rosparam>
        filter_field_name: z
        filter_limit_min: 0.01
        filter_limit_max: 1.5
        filter_limit_negative: False
        leaf_size: 0.01
      </rosparam>
    </node>

    <node name="topic_tools" pkg="topic_tools" type="throttle" respawn="true" output="screen" args="messages /voxel_grid/output 1.0 /voxel_grid/output_throttled"/>
  </group>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

    <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="move_group/MoveGroupCartesianPathService
				      move_group/MoveGroupExecuteTrajectoryAction
				      move_group/MoveGroupKinematicsService
				      move_group/MoveGroupMoveAction
				      move_group/MoveGroupPickPlaceAction
				      move_group/MoveGroupPlanService
				      move_group/MoveGroupQueryPlannersService
				      move_group/MoveGroupStateValidationService
				      move_group/MoveGroupGetPlanningSceneService
              move_group/ClearOctomapService
              move_group/ExecuteTaskSolutionCapability
				      " />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
